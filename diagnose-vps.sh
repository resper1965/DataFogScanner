#!/bin/bash

# Script de diagn√≥stico completo para VPS 62.72.8.164
# Execute como root: sudo ./diagnose-vps.sh

echo "üîç DIAGN√ìSTICO COMPLETO - VPS 62.72.8.164"
echo "========================================="
echo "Data: $(date)"
echo ""

# 1. Verificar servi√ßos do sistema
echo "1. SERVI√áOS DO SISTEMA"
echo "----------------------"
for service in postgresql redis-server nginx; do
    if systemctl is-active --quiet $service; then
        echo "‚úÖ $service: ATIVO"
    else
        echo "‚ùå $service: INATIVO"
        echo "   Tentando iniciar..."
        systemctl start $service 2>/dev/null && echo "   ‚úÖ Iniciado" || echo "   ‚ùå Falha ao iniciar"
    fi
done
echo ""

# 2. Verificar estrutura de arquivos
echo "2. ESTRUTURA DE ARQUIVOS"
echo "------------------------"
echo "Usu√°rio piidetector:"
if id piidetector &>/dev/null; then
    echo "‚úÖ Usu√°rio existe"
else
    echo "‚ùå Usu√°rio n√£o existe - criando..."
    useradd -m -s /bin/bash piidetector
fi

echo ""
echo "Diret√≥rios principais:"
for dir in /home/piidetector /home/piidetector/pii-detector /home/piidetector/config /home/piidetector/logs; do
    if [ -d "$dir" ]; then
        echo "‚úÖ $dir"
    else
        echo "‚ùå $dir - criando..."
        sudo -u piidetector mkdir -p "$dir"
    fi
done

echo ""
echo "Arquivos cr√≠ticos:"
[ -f "/home/piidetector/pii-detector/package.json" ] && echo "‚úÖ package.json" || echo "‚ùå package.json ausente"
[ -f "/home/piidetector/config/.env" ] && echo "‚úÖ .env" || echo "‚ùå .env ausente"
[ -f "/home/piidetector/pii-detector/ecosystem.config.js" ] && echo "‚úÖ ecosystem.config.js" || echo "‚ùå ecosystem.config.js ausente"
echo ""

# 3. Verificar Node.js e ferramentas
echo "3. NODE.JS E FERRAMENTAS"
echo "------------------------"
node_version=$(node --version 2>/dev/null || echo "n√£o instalado")
npm_version=$(npm --version 2>/dev/null || echo "n√£o instalado")
echo "Node.js: $node_version"
echo "npm: $npm_version"

echo ""
echo "Ferramentas globais:"
which pm2 &>/dev/null && echo "‚úÖ PM2: $(pm2 --version)" || echo "‚ùå PM2 n√£o instalado"
which tsx &>/dev/null && echo "‚úÖ tsx dispon√≠vel" || echo "‚ùå tsx n√£o instalado"
which tsc &>/dev/null && echo "‚úÖ TypeScript dispon√≠vel" || echo "‚ùå TypeScript n√£o instalado"
echo ""

# 4. Verificar Python
echo "4. PYTHON E AMBIENTE VIRTUAL"
echo "-----------------------------"
python_version=$(python3 --version 2>/dev/null || echo "n√£o instalado")
echo "Python: $python_version"

if [ -d "/home/piidetector/venv" ]; then
    echo "‚úÖ Ambiente virtual existe"
    echo "Pacotes instalados:"
    /home/piidetector/venv/bin/pip list | grep -E "(datafog|openpyxl|pypdf2)" || echo "‚ùå Pacotes Python ausentes"
else
    echo "‚ùå Ambiente virtual ausente"
fi
echo ""

# 5. Verificar banco de dados
echo "5. BANCO DE DADOS"
echo "-----------------"
if systemctl is-active --quiet postgresql; then
    echo "PostgreSQL ativo"
    
    # Verificar usu√°rio e database
    sudo -u postgres psql -c "\du" | grep piidetector &>/dev/null && echo "‚úÖ Usu√°rio piidetector existe" || echo "‚ùå Usu√°rio piidetector ausente"
    sudo -u postgres psql -l | grep pii_detector &>/dev/null && echo "‚úÖ Database pii_detector existe" || echo "‚ùå Database pii_detector ausente"
    
    # Teste de conex√£o
    if [ -f "/home/piidetector/config/.env" ]; then
        source /home/piidetector/config/.env
        pg_isready -h localhost -p 5432 -U piidetector &>/dev/null && echo "‚úÖ Conex√£o OK" || echo "‚ùå Falha na conex√£o"
    fi
else
    echo "‚ùå PostgreSQL inativo"
fi
echo ""

# 6. Verificar aplica√ß√£o
echo "6. APLICA√á√ÉO"
echo "------------"
if [ -d "/home/piidetector/pii-detector" ]; then
    cd /home/piidetector/pii-detector
    
    # Verificar se c√≥digo existe
    if [ -f "package.json" ]; then
        echo "‚úÖ C√≥digo da aplica√ß√£o presente"
        
        # Verificar depend√™ncias
        if [ -d "node_modules" ]; then
            echo "‚úÖ Depend√™ncias instaladas"
        else
            echo "‚ùå Depend√™ncias ausentes - instalando..."
            sudo -u piidetector npm install
        fi
    else
        echo "‚ùå C√≥digo da aplica√ß√£o ausente - baixando..."
        sudo -u piidetector git clone https://github.com/resper1965/DataFogScanner.git . 2>/dev/null || {
            sudo -u piidetector git init
            sudo -u piidetector git remote add origin https://github.com/resper1965/DataFogScanner.git
            sudo -u piidetector git pull origin main
        }
    fi
fi

# Verificar PM2
echo ""
echo "Status PM2:"
if sudo -u piidetector pm2 list | grep -q pii-detector; then
    echo "‚úÖ Aplica√ß√£o rodando"
    sudo -u piidetector pm2 list | grep pii-detector
else
    echo "‚ùå Aplica√ß√£o n√£o est√° rodando"
fi
echo ""

# 7. Testes de conectividade
echo "7. TESTES DE CONECTIVIDADE"
echo "--------------------------"
echo "Teste local (porta 5000):"
if curl -s http://localhost:5000/api/health &>/dev/null; then
    echo "‚úÖ Backend respondendo"
    health_data=$(curl -s http://localhost:5000/api/health)
    echo "   Status: $(echo $health_data | grep -o '"status":"[^"]*"' | cut -d'"' -f4)"
else
    echo "‚ùå Backend n√£o responde"
fi

echo ""
echo "Teste Nginx (porta 80):"
if curl -s http://localhost/ &>/dev/null; then
    echo "‚úÖ Nginx respondendo"
else
    echo "‚ùå Nginx n√£o responde"
fi

echo ""
echo "Teste externo:"
external_status=$(curl -s -o /dev/null -w "%{http_code}" http://62.72.8.164/ 2>/dev/null)
if [ "$external_status" = "200" ]; then
    echo "‚úÖ Site acess√≠vel externamente"
elif [ "$external_status" = "502" ]; then
    echo "‚ö†Ô∏è Site retorna 502 Bad Gateway (backend offline)"
else
    echo "‚ùå Site inacess√≠vel (status: $external_status)"
fi
echo ""

# 8. Logs recentes
echo "8. LOGS RECENTES"
echo "----------------"
if [ -f "/home/piidetector/logs/error.log" ]; then
    echo "√öltimos erros:"
    tail -5 /home/piidetector/logs/error.log 2>/dev/null || echo "Nenhum erro recente"
else
    echo "Arquivo de log n√£o encontrado"
fi
echo ""

# 9. Recomenda√ß√µes
echo "9. RECOMENDA√á√ïES"
echo "----------------"
recommendations=()

# Verificar problemas e gerar recomenda√ß√µes
! systemctl is-active --quiet nginx && recommendations+=("Iniciar Nginx: systemctl start nginx")
! systemctl is-active --quiet postgresql && recommendations+=("Iniciar PostgreSQL: systemctl start postgresql")
! which tsx &>/dev/null && recommendations+=("Instalar tsx: npm install -g tsx typescript")
! [ -f "/home/piidetector/pii-detector/package.json" ] && recommendations+=("Baixar c√≥digo: execute fix-vps.sh")
! sudo -u piidetector pm2 list | grep -q pii-detector && recommendations+=("Iniciar aplica√ß√£o: execute fix-permissions.sh")

if [ ${#recommendations[@]} -eq 0 ]; then
    echo "‚úÖ Sistema parece estar funcionando corretamente"
    echo ""
    echo "URLs de acesso:"
    echo "‚Ä¢ Frontend: http://62.72.8.164/"
    echo "‚Ä¢ API Health: http://62.72.8.164/api/health"
else
    echo "Problemas encontrados:"
    printf '%s\n' "${recommendations[@]}"
    echo ""
    echo "Scripts dispon√≠veis para corre√ß√£o:"
    echo "‚Ä¢ ./fix-permissions.sh - Corrige problemas de TypeScript/PM2"
    echo "‚Ä¢ ./fix-vps.sh - Instala√ß√£o completa do sistema"
    echo "‚Ä¢ ./quick-fix.sh - Corre√ß√£o r√°pida de problemas comuns"
fi

echo ""
echo "========================================="
echo "Diagn√≥stico conclu√≠do em $(date)"