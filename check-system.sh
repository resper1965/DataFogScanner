#!/bin/bash

# Script de Verifica√ß√£o do Sistema - PII Detector DataFog
# Verifica se todos os componentes est√£o funcionando corretamente

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_success() { echo -e "${GREEN}‚úì${NC} $1"; }
print_info() { echo -e "${BLUE}‚Ñπ${NC} $1"; }
print_warning() { echo -e "${YELLOW}‚ö†${NC} $1"; }
print_error() { echo -e "${RED}‚úó${NC} $1"; }

echo "üîç Verifica√ß√£o do Sistema PII Detector"
echo "====================================="

ERRORS=0
WARNINGS=0

# Fun√ß√£o para incrementar contadores
error() {
    print_error "$1"
    ((ERRORS++))
}

warning() {
    print_warning "$1"
    ((WARNINGS++))
}

# Verificar se est√° rodando como usu√°rio correto
if [ "$USER" != "datafog" ] && [ "$EUID" -ne 0 ]; then
    warning "Execute como usu√°rio 'datafog' ou root para verifica√ß√£o completa"
fi

# 1. Verificar sistema operacional
print_info "1. Verificando sistema operacional..."
if [ -f /etc/os-release ]; then
    . /etc/os-release
    print_success "Sistema: $PRETTY_NAME"
else
    error "Arquivo /etc/os-release n√£o encontrado"
fi

# 2. Verificar recursos do sistema
print_info "2. Verificando recursos do sistema..."

# RAM
TOTAL_RAM=$(free -m | awk 'NR==2{printf "%.0f", $2/1024}')
if [ "$TOTAL_RAM" -ge 2 ]; then
    print_success "RAM: ${TOTAL_RAM}GB (Suficiente)"
else
    warning "RAM: ${TOTAL_RAM}GB (Recomendado: 2GB+)"
fi

# Espa√ßo em disco
DISK_SPACE=$(df -h / | awk 'NR==2 {print $4}' | sed 's/G//')
if [ "${DISK_SPACE%.*}" -ge 10 ]; then
    print_success "Espa√ßo livre: ${DISK_SPACE}G (Suficiente)"
else
    warning "Espa√ßo livre: ${DISK_SPACE}G (Recomendado: 10GB+)"
fi

# 3. Verificar depend√™ncias
print_info "3. Verificando depend√™ncias instaladas..."

check_command() {
    if command -v "$1" &> /dev/null; then
        VERSION=$($1 --version 2>/dev/null | head -1 || echo "Instalado")
        print_success "$1: $VERSION"
    else
        error "$1 n√£o est√° instalado"
    fi
}

check_command node
check_command npm
check_command python3
check_command pip3
check_command psql
check_command redis-cli

# 4. Verificar servi√ßos
print_info "4. Verificando servi√ßos do sistema..."

check_service() {
    if systemctl is-active --quiet "$1"; then
        print_success "Servi√ßo $1: Ativo"
    else
        error "Servi√ßo $1: Inativo"
    fi
}

check_service postgresql
check_service redis-server
check_service nginx

# 5. Verificar estrutura de diret√≥rios
print_info "5. Verificando estrutura de diret√≥rios..."

check_directory() {
    if [ -d "$1" ]; then
        OWNER=$(stat -c '%U:%G' "$1")
        PERMS=$(stat -c '%a' "$1")
        print_success "$1 (${OWNER}, ${PERMS})"
    else
        error "Diret√≥rio $1 n√£o existe"
    fi
}

check_directory "/home/datafog"
check_directory "/home/datafog/pii-detector"
check_directory "/home/datafog/uploads"
check_directory "/home/datafog/uploads/sftp"
check_directory "/var/log/pii-detector"

# 6. Verificar configura√ß√µes
print_info "6. Verificando configura√ß√µes..."

if [ -f "/home/datafog/config/.env" ]; then
    print_success "Arquivo .env encontrado"
    
    # Verificar vari√°veis essenciais
    if grep -q "DATABASE_URL=" "/home/datafog/config/.env"; then
        print_success "DATABASE_URL configurada"
    else
        error "DATABASE_URL n√£o configurada"
    fi
    
    if grep -q "SESSION_SECRET=" "/home/datafog/config/.env"; then
        print_success "SESSION_SECRET configurada"
    else
        error "SESSION_SECRET n√£o configurada"
    fi
else
    error "Arquivo .env n√£o encontrado"
fi

# 7. Verificar conex√µes de rede
print_info "7. Verificando conectividade..."

# PostgreSQL
if pg_isready -h localhost -p 5432 &> /dev/null; then
    print_success "PostgreSQL: Conect√°vel"
else
    error "PostgreSQL: N√£o conect√°vel"
fi

# Redis
if redis-cli ping &> /dev/null; then
    print_success "Redis: Conect√°vel"
else
    error "Redis: N√£o conect√°vel"
fi

# Nginx
if curl -f http://localhost &> /dev/null; then
    print_success "Nginx: Respondendo"
else
    warning "Nginx: N√£o respondendo ou sem configura√ß√£o"
fi

# 8. Verificar aplica√ß√£o
print_info "8. Verificando aplica√ß√£o..."

if [ -d "/home/datafog/pii-detector" ]; then
    cd /home/datafog/pii-detector
    
    if [ -f "package.json" ]; then
        print_success "package.json encontrado"
    else
        error "package.json n√£o encontrado"
    fi
    
    if [ -d "node_modules" ]; then
        print_success "node_modules instalado"
    else
        warning "node_modules n√£o encontrado (execute npm install)"
    fi
    
    # Verificar se PM2 est√° rodando a aplica√ß√£o
    if command -v pm2 &> /dev/null; then
        if pm2 list | grep -q "pii-detector"; then
            STATUS=$(pm2 list | grep "pii-detector" | awk '{print $10}')
            if [ "$STATUS" = "online" ]; then
                print_success "PM2: Aplica√ß√£o online"
            else
                error "PM2: Aplica√ß√£o $STATUS"
            fi
        else
            warning "PM2: Aplica√ß√£o n√£o encontrada"
        fi
    else
        warning "PM2 n√£o instalado"
    fi
fi

# 9. Verificar logs
print_info "9. Verificando logs..."

check_log() {
    if [ -f "$1" ]; then
        SIZE=$(du -h "$1" | cut -f1)
        print_success "$1 (${SIZE})"
    else
        warning "$1 n√£o encontrado"
    fi
}

check_log "/var/log/pii-detector/app.log"
check_log "/var/log/pii-detector/error.log"
check_log "/var/log/nginx/access.log"
check_log "/var/log/nginx/error.log"

# 10. Verificar firewall e seguran√ßa
print_info "10. Verificando seguran√ßa..."

if command -v ufw &> /dev/null; then
    if ufw status | grep -q "Status: active"; then
        print_success "UFW: Ativo"
    else
        warning "UFW: Inativo"
    fi
else
    warning "UFW n√£o instalado"
fi

if command -v fail2ban-client &> /dev/null; then
    if systemctl is-active --quiet fail2ban; then
        print_success "Fail2Ban: Ativo"
    else
        warning "Fail2Ban: Inativo"
    fi
else
    warning "Fail2Ban n√£o instalado"
fi

# 11. Verificar backup
print_info "11. Verificando sistema de backup..."

if [ -f "/home/datafog/backup.sh" ]; then
    print_success "Script de backup encontrado"
else
    warning "Script de backup n√£o encontrado"
fi

if crontab -u datafog -l 2>/dev/null | grep -q "backup.sh"; then
    print_success "Backup agendado no cron"
else
    warning "Backup n√£o agendado no cron"
fi

# 12. Teste de performance
print_info "12. Teste b√°sico de performance..."

# CPU
CPU_CORES=$(nproc)
print_success "CPU: $CPU_CORES n√∫cleos"

# Load average
LOAD_AVG=$(uptime | awk -F'load average:' '{print $2}' | awk '{print $1}' | sed 's/,//')
if (( $(echo "$LOAD_AVG < $CPU_CORES" | bc -l) )); then
    print_success "Load average: $LOAD_AVG (Normal)"
else
    warning "Load average: $LOAD_AVG (Alto)"
fi

# Uso de mem√≥ria
MEM_USAGE=$(free | awk '/^Mem:/ {printf "%.1f", $3/$2 * 100}')
if (( $(echo "$MEM_USAGE < 80" | bc -l) )); then
    print_success "Uso de mem√≥ria: ${MEM_USAGE}% (Normal)"
else
    warning "Uso de mem√≥ria: ${MEM_USAGE}% (Alto)"
fi

# 13. Teste de funcionalidade
print_info "13. Teste de funcionalidade..."

if [ -f "/home/datafog/pii-detector/test-multiformat.py" ]; then
    print_info "Executando teste de detec√ß√£o..."
    if cd /home/datafog/pii-detector && python3 test-multiformat.py &> /dev/null; then
        print_success "Teste de detec√ß√£o: PASSOU"
    else
        error "Teste de detec√ß√£o: FALHOU"
    fi
else
    warning "Arquivo de teste n√£o encontrado"
fi

# Resumo final
echo ""
echo "==============================="
echo "üìä RESUMO DA VERIFICA√á√ÉO"
echo "==============================="

if [ $ERRORS -eq 0 ] && [ $WARNINGS -eq 0 ]; then
    print_success "Sistema perfeito! Todos os componentes funcionando."
elif [ $ERRORS -eq 0 ]; then
    print_warning "Sistema funcionando com $WARNINGS avisos."
else
    print_error "Sistema com problemas: $ERRORS erros, $WARNINGS avisos."
fi

echo ""
echo "üìã RECOMENDA√á√ïES:"

if [ $ERRORS -gt 0 ]; then
    echo "‚Ä¢ Corrigir os erros listados acima"
    echo "‚Ä¢ Consultar logs para mais detalhes"
    echo "‚Ä¢ Verificar documenta√ß√£o de instala√ß√£o"
fi

if [ $WARNINGS -gt 0 ]; then
    echo "‚Ä¢ Considerar resolver os avisos"
    echo "‚Ä¢ Monitorar recursos do sistema"
fi

echo "‚Ä¢ Executar backup regularmente"
echo "‚Ä¢ Monitorar logs de aplica√ß√£o"
echo "‚Ä¢ Manter sistema atualizado"

# Status de sa√≠da
if [ $ERRORS -gt 0 ]; then
    exit 1
else
    exit 0
fi